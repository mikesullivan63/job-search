{"version":3,"sources":["header/Header.js","results/Results.js","search/SearchBar.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","StyledResultsArea","styled","div","StyledResultsCompanyName","h4","StyledResultsCompanyJobTitle","span","StyledResultsCompanyJobLocation","ResultsCompany","props","console","log","company","state","jobs","displayStyle","displayMessage","error","substring","length","small","href","url","target","rel","map","job","index","title","location","Results","class","data","key","StyledSearchBar","SearchBar","results","handleInputChange","bind","handleSubmit","event","value","name","this","setState","preventDefault","forEach","board","processBoard","caller","newResults","slice","findIndex","element","fetch","then","res","json","result","updateBoardResults","concat","companies","Fragment","onSubmit","rows","onChange","type","color","Colors","PRIMARY","React","Component","App","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.dc247f3a.chunk.js","sourcesContent":["import React from 'react';\nimport {TopBar, TopBarLeft, TopBarRight}  from 'react-foundation';\nimport {Menu, MenuText}  from 'react-foundation';\n\n\nfunction Header() {\n    return (\n        <TopBar className=\"top-bar\" >\n            <TopBarLeft className='my-top-bar-right'>\n                <Menu>\n                    <MenuText>Common Platform Job Search Tool</MenuText>\n                </Menu>\n            </TopBarLeft>\n            <TopBarRight className='my-top-bar-right'>\n                <Menu>\n                </Menu>\n            </TopBarRight>\n        </TopBar>\n    )\n}\n\nexport default Header;","import React from 'react';\nimport styled from 'styled-components'\nimport {Grid, Cell} from 'react-foundation'\n\n\nconst StyledResultsArea = styled.div `\nmargin: 10px;\n`\n\nconst StyledResultsCompanyName = styled.h4 `\nmargin: 0.1em;\n`\n\nconst StyledResultsCompanyJobTitle = styled.span `\nvertical-align: top;\n`\nconst StyledResultsCompanyJobLocation = styled.span `\nvertical-align: top;\n`\n\n/*\n    Object coming in should look like this:\n    {\n        company: Company Name\n        jobs: [{\n            title: Job Title,\n            location: Job Location,\n            url: URL to posting\n        }]\n    }\n*/\nfunction ResultsCompany(props) {\n\n    console.log(props.company.company + ' ' + props.company.state + ' ' + props.company.jobs);\n\n    let displayStyle = \"callout\"\n    let displayMessage = \"\"\n\n    if(props.company.state === 'PENDING' || props.company.state === '' || !props.company.state) {\n        displayStyle = \"callout\"\n        displayMessage = \"Pending Lookup\"\n    } else if(props.company.state === 'ERROR') {\n        displayStyle = \"callout alert\"\n        displayMessage = \"Error: \" + props.company.error.substring(0,100)     \n    } else if(props.company.state === 'COMPLETED') {\n        displayStyle = \"callout \" + ((!props.company.jobs||props.company.jobs.length===0)?\"secondary\":\"primary\")\n        displayMessage = \"No Matching Jobs\"\n    }    \n\n    return (\n        <div className={displayStyle}>\n            <Grid className=\"display\">\n                <Cell small={4}>\n                    <a \n                        href={props.company.url} \n                        target=\"_blank\" \n                        rel=\"noopener noreferrer\">\n                            <StyledResultsCompanyName>\n                                {props.company.company}\n                            </StyledResultsCompanyName>\n                    </a>\n                </Cell>\n\n                {displayMessage !== \"\" && \n                    <Cell small={6} className=\"result-message\">{displayMessage}</Cell>\n                }\n            </Grid>\n\n\n                {props.company.state === 'COMPLETED' &&  props.company.jobs && props.company.jobs.map(function(job, index){\n                    return (\n                        <Grid className=\"display\">\n                            <Cell small={3}>\n                                <StyledResultsCompanyJobTitle>< a href={job.url} target=\"_blank\" rel=\"noopener noreferrer\">{job.title}</ a></StyledResultsCompanyJobTitle>\n                            </Cell>\n                            <Cell small={6}>\n                                <StyledResultsCompanyJobLocation>{job.location}</StyledResultsCompanyJobLocation>\n                            </Cell>\n                        </Grid>\n                )})}          \n        </div>\n    );\n  }\n  \n  /*\n    Object coming in should look like this:\n    [\n        {\n            company: Company Name\n            jobs: [{\n                title: Job Title,\n                location: Job Location,\n                url: URL to posting\n            }]\n        },...\n    ]\n*/\n  function Results(props) {\n    return (\n        <StyledResultsArea class=\"search-results grid-x grid-margin-x\">\n            {props && props.data? \n                props.data.map(function(company, index){\n                    return (\n                        <ResultsCompany key={company.company} company={company} />\n                    );\n                })\n            : ( <div class=\"no-results\">No Results</div> )\n            }\n        </StyledResultsArea>\n    );\n  }\n  \n  export default Results;","import React from 'react';\nimport styled  from 'styled-components'\nimport {Button, Colors} from 'react-foundation'\nimport Results from '../results/Results';\n\n\nconst StyledSearchBar = styled.div `\nmargin: 10px;\n`\n\nclass SearchBar extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            title: 'Engineering Manager or director or vp or Engineer Manager',\n            location: 'Remote or us or nation or baton or orleans or home or anywhere',\n            results: [],\n        };\n\n        this.handleInputChange = this.handleInputChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleInputChange(event) {\n        const target = event.target;\n        const value = target.value;\n        const name = target.name;\n    \n        this.setState({\n          [name]: value\n        });\n    }\n\n    updateResults(data) {\n        this.setState({\n          results: data\n        });\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n        this.state.results.forEach(board => this.processBoard(board, this.state.title, this.state.location, this));\n    }\n\n    processBoard(board, title, location, caller) {\n        let newResults = caller.state.results.slice(); \n        const index = newResults.findIndex((element) => element.company === board.company);\n\n        if(index !== -1){\n            newResults[index].state = 'PENDING';\n            this.setState({\n                results: newResults\n            });\n        } \n\n        fetch(\"/api/\" + board.company + \"/\" + title + \"/\" + location)\n          .then(res => res.json())\n          .then(result => this.updateBoardResults(result,  caller));\n    }\n\n    updateBoardResults(result,  caller) {\n        let newResults = caller.state.results.slice(); \n        const index = newResults.findIndex((element) => element.company === result.company);\n\n        result.state = result.error?'ERROR':'COMPLETED';\n        (index === -1) ? newResults.concat(result) : newResults[index] = result;\n\n        this.setState({\n            results: newResults\n        });\n    }\n\n    componentDidMount() {\n        fetch(\"/api/companies\")\n        .then(res => res.json())\n        .then(data => this.setState({\n                results: data.companies.map(company => ({\n                    company: company.name, jobs: []\n                }))\n        }));\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <StyledSearchBar>\n                    <form onSubmit={this.handleSubmit}>\n                        <div class=\"grid-x grid-margin-x\">\n                            <label className=\"cell small-1  middle\">Job Title:</label>\n                            <textarea \n                                name=\"title\" \n                                className=\"cell small-3\"\n                                rows={4}\n                                value={this.state.title} \n                                onChange={this.handleInputChange} \n                            />\n                            <label className=\"cell small-1  middle\">Location:</label>\n                            <textarea \n                                name=\"location\" \n                                className=\"cell small-3\"\n                                rows={4}\n                                value={this.state.location} \n                                onChange={this.handleInputChange} \n                            />\n                            <Button \n                                type=\"submit\" \n                                value=\"Search\"\n                                color={Colors.PRIMARY} \n                                className=\"cell small-2\"\n                            >\n                                Search\n                            </Button>\n                        </div>\n                    </form> \n\n                </StyledSearchBar>\n                <Results data={this.state.results}/>\n            </React.Fragment>\n\n        );\n    }\n}\n\nexport default SearchBar;","import React from 'react';\nimport Header from './header/Header';\nimport SearchBar from './search/SearchBar';\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <Header />\n      <SearchBar />\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'foundation-sites/dist/css/foundation.min.css';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}